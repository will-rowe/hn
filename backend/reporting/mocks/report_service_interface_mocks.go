// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	report "github.com/will-rowe/hn/api/gen/go/report/v1"
)

// MockReportServiceInterface is an autogenerated mock type for the ReportServiceInterface type
type MockReportServiceInterface struct {
	mock.Mock
}

type MockReportServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReportServiceInterface) EXPECT() *MockReportServiceInterface_Expecter {
	return &MockReportServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessReport provides a mock function with given fields: ctx, req
func (_m *MockReportServiceInterface) ProcessReport(ctx context.Context, req *report.SubmitReportRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProcessReport")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *report.SubmitReportRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *report.SubmitReportRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *report.SubmitReportRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReportServiceInterface_ProcessReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessReport'
type MockReportServiceInterface_ProcessReport_Call struct {
	*mock.Call
}

// ProcessReport is a helper method to define mock.On call
//   - ctx context.Context
//   - req *report.SubmitReportRequest
func (_e *MockReportServiceInterface_Expecter) ProcessReport(ctx interface{}, req interface{}) *MockReportServiceInterface_ProcessReport_Call {
	return &MockReportServiceInterface_ProcessReport_Call{Call: _e.mock.On("ProcessReport", ctx, req)}
}

func (_c *MockReportServiceInterface_ProcessReport_Call) Run(run func(ctx context.Context, req *report.SubmitReportRequest)) *MockReportServiceInterface_ProcessReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*report.SubmitReportRequest))
	})
	return _c
}

func (_c *MockReportServiceInterface_ProcessReport_Call) Return(_a0 string, _a1 error) *MockReportServiceInterface_ProcessReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReportServiceInterface_ProcessReport_Call) RunAndReturn(run func(context.Context, *report.SubmitReportRequest) (string, error)) *MockReportServiceInterface_ProcessReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReportServiceInterface creates a new instance of MockReportServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReportServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReportServiceInterface {
	mock := &MockReportServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
